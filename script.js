// ุชุนุฑูู ุงูุฑุฏูุฏ ุงููุณุจูุฉ
const botResponses = {
    "ุงูุณูุงู ุนูููู": "ูุนูููู ุงูุณูุงู! ูุด ุชุญุชุงุฌุ",
    "ูุด ูุญูุงูุ": "ุฑุญูุฉ ุฑุจูุ ููุชุง ูุจุงุณุ",
    "ูุด ุงุณููุ": "ุฃูุง ุฑูุจูุช ุฏุฑุฏุดุฉ ุจุณูุท ๐.",
"ุดูุฑุงู": "ุนูู ุงูุฑุญุจ ูุงูุณุนุฉ!",
    "ูุฏุงุนุงู": "ุฅูู ุงูููุงุก!"
       "ุญุจูุช ูุณูุณูู": "ุชูุธู",
};

// ุงูููููุงุช ุงูุฑุฆูุณูุฉ
const sendBtn = document.getElementById("send-btn");
const micBtn = document.getElementById("mic-btn");
const userInput = document.getElementById("user-input");
const chatBox = document.getElementById("chat-box");

// ุฅุฑุณุงู ุงูุฑุณุงุฆู
sendBtn.addEventListener("click", () => {
    const userMessage = userInput.value.trim();
    if (userMessage) {
        processMessage(userMessage);
        userInput.value = "";
    }
});

// ุชุดุบูู ุงููููุฑูููู
micBtn.addEventListener("click", () => {
    startSpeechRecognition();
});

function processMessage(message) {
    addMessage("user", message);
    getBotResponse(message);
}

function addMessage(sender, message) {
    const messageDiv = document.createElement("div");
    messageDiv.className = `message ${sender}`;
    messageDiv.textContent = message;
    chatBox.appendChild(messageDiv);
    chatBox.scrollTop = chatBox.scrollHeight;
}

function getBotResponse(message) {
    const response = botResponses[message] || "ุนุฐุฑุงูุ ูู ุฃููู ุณุคุงูู.";
    setTimeout(() => {
        addMessage("bot", response);
        speak(response); // ุชุญููู ุงูุฑุฏ ุฅูู ุตูุช
    }, 500);
}

// ุชุญููู ุงููุต ุฅูู ุตูุช
function speak(text) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = "ar"; // ุงููุบุฉ ุงูุนุฑุจูุฉ
    speechSynthesis.speak(utterance);
}

// ุงูุชุนุฑู ุนูู ุงูุตูุช
function startSpeechRecognition() {
    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.lang = "ar"; // ุงููุบุฉ ุงูุนุฑุจูุฉ

    recognition.start();

    recognition.onresult = (event) => {
        const speechResult = event.results[0][0].transcript;
        userInput.value = speechResult;
        processMessage(speechResult);
    };

    recognition.onerror = (event) => {
        console.error("ุญุฏุซ ุฎุทุฃ ูู ุงูุชุนุฑู ุนูู ุงูุตูุช:", event.error);
    };
}
